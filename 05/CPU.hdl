// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outAlu, sel=instruction[15], 
    out=insMuxOutAlu);   // instruction / ALU output

    // when opt code = 0 or des is A, 
    // updated to register A
    Not(in=instruction[15], out=notIns);
    Or(a=notIns, b=instruction[5], out=notInsOrDestA);
    ARegister(in=insMuxOutAlu, load=notInsOrDestA, 
    out=outRegA, out[0..14]=addressM);
    // Register A

    // only when opt code is 1 and des is D,
    // alu output updates to register D
    And(a=instruction[15], b=instruction[4], 
    out=optAndDestD);
    DRegister(in=outAlu, load=optAndDestD, out=outRegD);
    And16(a=outRegD, b=true); 
    // D register

    // only when opt code is 1 and leftist comp code are 1, 
    // out is inM
    And(a=instruction[15], b=instruction[12], 
    out=optAndLeftistComp);
    Mux16(a=outRegA, b=inM, sel=optAndLeftistComp, 
    out=outRegAMuxInM);     // A / M

    // only when opt code is 1 and des is M,
    // alu output writes to M
    And(a=instruction[15], b=instruction[3], 
    out=optAndDestM);
    And(a=true, b=optAndDestM, out=writeM);
    // outM = outAlu
    And16(a=true, b=outAlu, out=outM);

    ALU(x=outRegD, y=outRegAMuxInM, 
    zx=instruction[11], 
    nx=instruction[10], 
    zy=instruction[9], 
    ny=instruction[8], 
    f=instruction[7], 
    no=instruction[6], 
    out=outAlu, zr=zr, ng=ng);
    
    And(a=instruction[15], b=instruction[0], out=insAndGt);
    And(a=instruction[15], b=instruction[1], out=insAndEq);
    And(a=instruction[15], b=instruction[2], out=insAndLt);

    Or(a=ng, b=zr, out=negativeOrZero);
    Not(in=negativeOrZero, out=positive);
    And(a=insAndGt, b=positive, out=greatThan0Jump);
    And(a=insAndEq, b=zr, out=equalTo0Jump);
    And(a=insAndLt, b=ng, out=lessThanTo0Jump);
    Or(a=greatThan0Jump, b=lessThanTo0Jump, out=notEqualTo0Jump);
    Or(a=notEqualTo0Jump, b=equalTo0Jump, out=jump);

    Mux16(a=outPcInc, b=outRegA, sel=jump, out=incMuxJump);
    Mux16(a=incMuxJump, b=false, sel=reset, out=resetMuxIncMuxJump);
    Register(in=resetMuxIncMuxJump, load=true, 
    out=outPc, out[0..14]=pc);
    Inc16(in=outPc, out=outPcInc); 
    // PC
    
}